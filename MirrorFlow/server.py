import socket
import threading
import zlib  # –í—Å—Ç—Ä–æ–µ–Ω –≤ Python, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
import numpy as np
from mss import mss
import struct

class LowLatencyVideoServer:
    def __init__(self, host='0.0.0.0', port=9999):
        self.host = host
        self.port = port
        self.clients = []
        self.running = False
        
    def start(self):
        self.running = True
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        server_socket.bind((self.host, self.port))
        server_socket.listen(5)
        
        print(f"üöÄ Server started on {self.host}:{self.port}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞
        capture_thread = threading.Thread(target=self.capture_and_send)
        capture_thread.daemon = True
        capture_thread.start()
        
        while self.running:
            try:
                client_socket, addr = server_socket.accept()
                client_socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
                print(f"üì± New connection from {addr}")
                self.clients.append(client_socket)
            except:
                break
        
        server_socket.close()
    
    def capture_and_send(self):
        """–ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞–º"""
        with mss() as sct:
            monitor = sct.monitors[1]  # –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä
            
            while self.running:
                try:
                    # –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞
                    screenshot = sct.grab(monitor)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ numpy array
                    frame = np.array(screenshot)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è BGRA to RGB
                    frame = frame[:, :, :3]  # –£–±–∏—Ä–∞–µ–º alpha –∫–∞–Ω–∞–ª
                    
                    # –ö–æ–º–ø—Ä–µ—Å—Å–∏—è (zlib –≤—Å—Ç—Ä–æ–µ–Ω –≤ Python)
                    compressed = zlib.compress(frame.tobytes(), level=1)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
                    for client in self.clients[:]:
                        try:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                            size = struct.pack('!I', len(compressed))
                            client.sendall(size)
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                            client.sendall(compressed)
                        except:
                            self.clients.remove(client)
                            print("‚ùå Client disconnected")
                
                except Exception as e:
                    print(f"Capture error: {e}")
                    continue
    
    def stop(self):
        self.running = False

def main():
    server = LowLatencyVideoServer()
    try:
        server.start()
    except KeyboardInterrupt:
        print("\nüõë Server stopping...")
        server.stop()

if __name__ == "__main__":
    main()